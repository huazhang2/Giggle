""""""""""""""""""""""""""""
" BASIC CONFIG
""""""""""""""""""""""""""""""
syntax on
set number
set ruler
set laststatus=1
set autoindent
set cindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab       " Set Tab expands to spaces
set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1
set termencoding=utf-8
set backspace=indent,eol,start
" Reference from /etc/vim/vimrc on Ubuntu
set nocompatible    " No vi compatible
set showmatch       " Show matching brackets.
set ignorecase      " Do case insensitive matching
set smartcase       " Do smart case matching
set incsearch       " Incremental search
set hidden          " Hide buffers when they are abandoned
set mouse=a         " Enable mouse usage (all modes), or 'ni' for normal & insert
set noautochdir     " No need change dir with help of leaderF
" set showcmd       " Show (partial) command in status line.
" set autowrite     " Automatically save before commands like :next and :make
filetype plugin indent on
" jump to the last position when reopening a file
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$")
                \ | exe "normal! g'\"" | endif
endif
"------ :help ins-completion-menu -----
set pumheight=12      " maximum height of popup menu
set shell=/bin/bash   " set vim default shell
let mapleader='\'   " leader key, default is '\'
set t_Co=256        " number of colors
set background=dark
"------ private under ~/.vim/colors -----
:colorscheme darkcoding

""""""""""""""""""""""""""""""
" BASIC KEYBIND
""""""""""""""""""""""""""""""
" map: recursive mapping, case ignorance
" nnoremap: no recursive mapping
cmap w!! w !sudo tee %
set pastetoggle=<F12>
noremap <F10> :set invnumber<CR>
map <leader>k :mark<Space>
" map leader NO. switch between buffers
nmap <leader>1 :buffer1<CR>
nmap <leader>2 :buffer2<CR>
nmap <leader>3 :buffer3<CR>
nmap <leader>4 :buffer4<CR>
nmap <leader>5 :buffer5<CR>
nmap <leader>6 :buffer6<CR>
nmap <leader>7 :buffer7<CR>
nmap <leader>8 :buffer8<CR>
nmap <leader>9 :buffer9<CR>
nmap <leader>- :bprevious<CR>
nmap <leader>+ :bnext<CR>
" unnamed for '* register', unnamedplus for '+ register'
set clipboard=unnamedplus,unnamed
" copy to system clipboard
noremap <silent> <leader>y "*y <CR>
noremap <silent> <leader>p "*p <CR>
noremap <silent> <leader>Y "+y <CR>
noremap <silent> <leader>P "+p <CR>
" vmap <leader>y :!xclip -f -sel clip<CR>
" map <leader>p  :-1r !xclip -o -sel clip<CR>

""""""""""""""""""""""""""""""
" SUMMARIZE PLUGIN MAPPING
""""""""""""""""""""""""""""""
" nnoremap <silent> <F2> :IndentLinesToggle <CR>
" nnoremap <silent> <F3> :NERDTreeToggle<CR>
" map <F4> <leader>ci <CR>
" nnoremap <silent> <F5> :call TagbarMyOpen() <CR>
" nnoremap <silent> <F6> :AirlineToggle <CR>

""""""""""""""""""""""""""""""
" VIM-PLUG CONFIG
""""""""""""""""""""""""""""""
call plug#begin('~/.vim/bundle')

"------ OPTIONAL PLUGINS -----
" Plug 'davidhalter/jedi'
" Plug 'tell-k/vim-autopep8'
" Plug 'Chiel92/vim-autoformat'
" Plug 'mileszs/ack.vim'
" Plug 'Yggdroot/LeaderF', { 'do': './install.sh'  }
"------ NEW PLUGINS -----
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'scrooloose/nerdcommenter'
Plug 'jiangmiao/auto-pairs'
" Plug 'majutsushi/tagbar'
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
Plug 'Yggdroot/indentLine'
"------ FUZZY FINDER -----
Plug 'Yggdroot/LeaderF'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
"------ BEAUTIFY LINE -----
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
"------ CODE EXPAND -----
Plug 'ervandew/supertab'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
"------ CODE COMPLETION -----
Plug 'Valloric/YouCompleteMe'
Plug 'tenfyzhong/CompleteParameter.vim'

" Initialize plugin system
call plug#end()

""""""""""""""""""""""""""""""
" CONFIG VIM-AIRLINE
""""""""""""""""""""""""""""""
nnoremap <silent> <F6> :AirlineToggle<CR>
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_theme = 'base16_grayscale'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#show_tab_type = 0
let airline#extensions#tabline#disable_refresh = 0
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
" let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:tmuxline_powerline_separators = 0
let g:airline#extensions#tmuxline#enabled = 0

""""""""""""""""""""""""""""""
" CONFIG LEADERF
""""""""""""""""""""""""""""""
" map <leader>F  :LeaderfFile<CR>
let g:Lf_ShortcutF = '<leader>F'
let g:Lf_StlColorscheme = 'dark_leaderf'
let g:Lf_WindowHeight = 0.50
let g:Lf_WildIgnore = {
   \ 'dir': ['.svn','.git','.hg', '.acme_project', '.ACMEROOT'],
   \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]']
   \}
" press <F5> to refresh the cache.
let g:Lf_DelimiterChar = ';'
let g:Lf_MruFileExclude = ['*.so']
let g:Lf_CommandMap = {'<C-C>': ['<Esc>', '<C-C>']}
let g:Lf_HighlightIndividual = 0
let g:Lf_StlSeparator = { 'left': '', 'right': ''  }
map <leader><leader>f   :LeaderfFunction<CR>
map <leader><leader>fa  :LeaderfFunctionAll<CR>
map <leader><leader>fw  :LeaderfFunctionCword<CR>
" search line which has the word
map <leader><leader>l   :LeaderfLine<CR>
map <leader><leader>la  :LeaderfLineAll<CR>
map <leader><leader>lw  :LeaderfLineCword<CR>
" search line match word | end
map <leader><leader>m   :LeaderfMruCwd<CR>
map <leader><leader>ma  :LeaderfMru<CR>
" similar as :buffers
map <leader><leader>b   :LeaderfBuffer<CR>

""""""""""""""""""""""""""""""
" CONFIG FZF.VIM
""""""""""""""""""""""""""""""
let g:fzf_layout = { 'down': '~50%'  }
" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1
" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R −−fields=S'
" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always
   \ --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
let g:fzf_history_dir = '~/.local/share/fzf-history'
" hot key mapping, different from LeaderF
let g:fzf_command_prefix = 'Fzf'
map <leader>f   :FzfFiles<CR>
map <leader>F   :FzfGFiles<CR>
map <leader>l   :FzfBLines<CR>
map <leader>la  :FzfLines<CR>
map <leader>t   :FzfBTags<CR>
map <leader>ta  :FzfTags<CR>
map <leader>b   :FzfBCommits<CR>
map <leader>ba  :FzfCommits<CR>
map <leader>gg  :GGrep<CR>
map <Leader>r   :Rg<CR>

" command! -bang -nargs=* FzfAg call
"   \ fzf#vim#ag(<q-args>, {'options': '--delimiter : --nth 4..'}, <bang>0)

" command! -bang -nargs=* Rg
"   \ call fzf#vim#grep(
"   \   'rg --column --line-number --no-heading --color=always
"   \   --fixed-strings --ignore-case --no-ignore --hidden --follow'.shellescape(<q-args>), 1,
"   \   <bang>0 ? fzf#vim#with_preview('up:60%')
"   \           : fzf#vim#with_preview('right:50%:hidden', '?'),
"   \   <bang>0)

"  --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1,

" command! -bang -nargs=* FzfFind call \
"   \ fzf#vim#grep('rg --column --line-number
"   \ --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow
"   \ --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)')

" Command for git grep
" - fzf#vim#grep(command, with_column, [options], [fullscreen])
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep('git grep --line-number '.shellescape(<q-args>), 0, <bang>0)

" Override Colors command. You can safely do this in your .vimrc as fzf.vim
" will not override existing commands.
command! -bang Colors
  \ call fzf#vim#colors({'left': '15%', 'options': '--reverse --margin 30%,0'}, <bang>0)

" Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

" Likewise, Files command with preview window
command! -bang -nargs=? -complete=dir FzfFiles
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

""""""""""""""""""""""""""""""
" CONFIG ACK.VIM
""""""""""""""""""""""""""""""
" let g:ack_autoclose = 1
" if executable('ag')
"   let g:ackprg = 'ag --vimgrep'
" endif
" cnoreabbrev Ack Ack!
" nnoremap <Leader>a :Ack!<Space>

""""""""""""""""""""""""""""""
" CONFIG TAGBAR
""""""""""""""""""""""""""""""
" let g:tagbar_ctags_bin = "/usr/bin/ctags"
nnoremap <silent> <F5> :TagbarToggle<CR>
let g:Tagbar_title = "[Tagbar]"
let g:tagbar_left = 0
let g:tagbar_width = 25
let g:tagbar_indent = 1
" originally Yellow value 11
" highlight Search ctermbg=88
highlight TagbarSignature ctermfg=68

""""""""""""""""""""""""""""""
" CONFIG INDENTLINE
""""""""""""""""""""""""""""""
let g:indentLine_char = '¦'
let g:indentLine_color_term = 245
let g:indentLine_enabled = 0
nnoremap <silent> <F2> :IndentLinesToggle<CR>

""""""""""""""""""""""""""""""
" CONFIG NERDTREE
""""""""""""""""""""""""""""""
" When pressed F3, toggle nerd tree
nnoremap <silent> <F3> :NERDTreeToggle<CR>
let g:NERDTree_title = "[NERDTree]"
let g:NERDTreeShowBookmarks = 0
let g:NERDTreeWinSize = 20 " default 30
let g:NERDTreeWinPos = 'left' " only left or right

""""""""""""""""""""""""""""""
" CONFIG NERDCOMMENTER
""""""""""""""""""""""""""""""
"quick comment/uncomment
map <F4> <leader>ci<CR>
"add a space after comment flag
let g:NERDSpaceDelims = 1

""""""""""""""""""""""""""""""
" CONFIG SUPERTAB
""""""""""""""""""""""""""""""
let g:SuperTabDefaultCompletionType = '<C-n>'

""""""""""""""""""""""""""""""
" CONFIG AUTO-PAIRS
""""""""""""""""""""""""""""""
let g:AutoPairs = {'[':']', '{':'}',"'":"'",'"':'"', '`':'`'}
inoremap <buffer><silent> ) <C-R>=AutoPairsInsert(')')<CR>

""""""""""""""""""""""""""""""
" CONFIG ULTISNIPS
""""""""""""""""""""""""""""""
"Trigger configuration. Do not use <tab>
"if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<c-b>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit = "vertical"

""""""""""""""""""""""""""""""
" CONFIG COMPLETEPARAMETER.VIM
""""""""""""""""""""""""""""""
inoremap <silent><expr> ( complete_parameter#pre_complete("()")
smap <c-j> <Plug>(complete_parameter#goto_next_parameter)
imap <c-j> <Plug>(complete_parameter#goto_next_parameter)
smap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
imap <c-k> <Plug>(complete_parameter#goto_previous_parameter))
" use ultisnips mapping to goto next or previous parameter if set
let g:complete_parameter_use_ultisnips_mapping = 0

""""""""""""""""""""""""""""""
" CONFIG YOUCOMPLETEME
""""""""""""""""""""""""""""""
let g:ycm_semantic_triggers =  {
  \   'c' : ['->', '.', 're![_a-zA-z0-9]'],
  \   'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
  \             're!\[.*\]\s'],
  \   'ocaml' : ['.', '#'],
  \   'cpp,objcpp' : ['->', '.', '::', 're![_a-zA-z0-9]'],
  \   'perl' : ['->'],
  \   'php' : ['->', '::'],
  \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
  \   'ruby' : ['.', '::'],
  \   'lua' : ['.', ':'],
  \   'erlang' : [':'],
  \ }
" let g:ycm_keep_logfiles = 1
" let g:ycm_log_level = 'debug'
set completeopt=longest,menu
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_error_symbol = '>>'
let g:ycm_warning_symbol = '>*'
"let g:ycm_key_invoke_completion = '<F9>'
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 0
let g:ycm_cache_omnifunc = 0
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
" Do not delete next line | specify python3 interpreter
let g:ycm_server_python_interpreter = '/usr/local/bin/python3'
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_autoclose_preview_window_after_insertion = 0
let g:ycm_autoclose_preview_window_after_completion = 0
let g:ycm_goto_buffer_command = 'new-tab'
" nnoremap <leader>jl :YcmCompleter GoToDeclaration<CR>
" nnoremap <leader>jf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>j :YcmCompleter GoToDefinitionElseDeclaration<CR>
